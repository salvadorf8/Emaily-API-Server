const _ = require('lodash');
const Path = require('path-parser').default;
const { URL } = require('url');
const mongoose = require('mongoose');

const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

const Survey = mongoose.model('surveys');

module.exports = (app) => {
    app.get('/api/surveys', requireLogin, async (req, res) => {
        const surveys = await Survey.find({ _user: req.user.id }).select({
            recipients: false
        });

        res.send(surveys);
    });

    app.get('/api/surveys/:surveyId/:choice', (req, res) => {
        res.send('Thanks for voting!');
    });

    //the package localtunnel gives a url and use to defined in sendgrid's configuration page
    app.post('/api/surveys/webhooks', (req, res) => {
        // using path-parser, instantiate a Path object and declare variables surveyId, and choice
        const p = new Path('/api/surveys/:surveyId/:choice');

        // chain multiple events together
        // map through each possible sendgrid requests
        // see note inside inner function
        // using the compact function from lodash, remove the request elements that are undefined
        // using the uniqBy function from lodash, remove duplicate request message elements
        // execute the following mongo DB query to update the recipients values
        // when sending query to mongo DB use _id, not id
        _.chain(req.body)
            .map(({ url, email }) => {
                // extract the path from the entire URL all we care about is ex: /api/surveys/5971/yes
                // using path-parser, call the test method, pass the path, to test if the values exists to be assigned to each variable
                const match = p.test(new URL(url).pathname);
                // if data was missing it will return null, thus skip to next request
                if (match) {
                    return {
                        email,
                        surveyId: match.surveyId,
                        choice: match.choice
                    };
                }
            })
            .compact()
            .uniqBy('email', 'surveyId')
            .each(({ surveyId, email, choice }) => {
                Survey.updateOne(
                    {
                        _id: surveyId,
                        recipients: {
                            $elemMatch: { email: email, responded: false }
                        }
                    },
                    {
                        $inc: { [choice]: 1 },
                        $set: { 'recipients.$.responded': true },
                        lastResponded: Date.now()
                    }
                ).exec();
            })
            .value();

        // tell sendgrid everything is ok, because sendgrid will continue to send duplicate events
        res.send({});
    });

    app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
        const { title, subject, body, recipients } = req.body;

        const survey = new Survey({
            title: title,
            subject: subject,
            body: body,
            recipients: recipients.split(',').map((email) => ({ email: email.trim() })),
            _user: req.user.id,
            dateSent: Date.now()
        });

        //async await's can be stacked to control helper functions
        const mailer = new Mailer(survey, surveyTemplate(survey));

        try {
            await mailer.send();
            await survey.save();
            req.user.credits -= 1;
            const user = await req.user.save();

            res.send(user);
        } catch (err) {
            res.status(422).send(err);
        }
    });
};

// note: remember with refactoring, below is longer version before ES6 syntax

// recipients: recipients.split(',').map((email) => { return { email: email }});

// " _user " this indicates this is a relationship

// req.user.id, this is automgenerated by mongoose, and mongoDB
